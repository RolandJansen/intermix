(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{69:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return d}));var a=t(2),i=t(6),r=(t(0),t(85)),l={id:"Intermix v0.7.0 Released",title:"Intermix v0.7.0 Released",author:"Roland Jansen",tags:["release","intermix","presets"]},o={permalink:"/intermix/blog/Intermix v0.7.0 Released",editUrl:"https://github.com/RolandJansen/intermix/tree/homepage/blog/blog/2020-09-22-Version-0.7-released.md",source:"@site/blog\\2020-09-22-Version-0.7-released.md",description:"Intermix Version 0.7.0 introduces external plugins that can be loaded at runtime.",date:"2020-09-22T00:00:00.000Z",tags:[{label:"release",permalink:"/intermix/blog/tags/release"},{label:"intermix",permalink:"/intermix/blog/tags/intermix"},{label:"presets",permalink:"/intermix/blog/tags/presets"}],title:"Intermix v0.7.0 Released",readingTime:1.52,truncated:!0,nextItem:{title:"Intermix v0.6.0 Released",permalink:"/intermix/blog/Intermix v0.6.0 Released"}},s=[],u={rightToc:s};function d(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Intermix Version 0.7.0 introduces external plugins that can be loaded at runtime."),Object(r.b)("p",null,"It is now possible to write custom plugins as ES2015 modules and load them either as npm package\nor at runtime into the browser. There will be a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/RolandJansen/intermix-plugin-template"}),"template repository"),"\nthat can be used to get your plugin dev-environment up and running in no time (should be ready in a few days)."),Object(r.b)("p",null,"If using a bundler, adding external plugins is as simple as this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'import { addPlugin, addPluginClass } from "intermix";\nimport MyPluginConstructor from "MyPlugin";\n\naddPluginClass(MyPluginConstructor);\n\n// Then you can work with this plugin (eg build instances)\nconst pluginName = MyPluginConstructor.metaData.name;\nconst pluginUid = addPlugin(pluginName); // register an instance of the plugin\n')),Object(r.b)("p",null,"If you want the plugin to load at runtime you can do so with dynamic imports:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'import("<url>").then((PluginModule) => {\n    addPluginClass(PluginModule.default);\n}\n')),Object(r.b)("p",null,"or even simpler"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'const PluginModule = await import("<url>");\naddPluginClass(PluginModule.default);\n')),Object(r.b)("p",null,"The other major change in this release is that Rollup replaces Webpack for bundling. Webpack lacks support for\nEcmaScript modules (ESM) as output format which turned out to be a real problem for intermix."),Object(r.b)("p",null,"I tried different formats like IIFE, AMD and CommonJS but all of them did not work on both client and server side.\nThe main file in the npm package is still CommonJS but ESM should be used wherever possible and is the only format\nfor plugins."),Object(r.b)("p",null,"In the future, chances are that bundling can be dropped (for NPM packages) to get better tree-shaking results and less code loaded into the client.\nFor this scenario ",Object(r.b)("inlineCode",{parentName:"p"},"npm run compile")," creates experimental, non-bundled versions of intermix (CJS and ESM) in the ",Object(r.b)("inlineCode",{parentName:"p"},"lib/")," folder.",Object(r.b)("br",null),"\nWith this new feature I could drop the output size of the template-repo from 49kB to 2kB (!)."),Object(r.b)("p",null,"You can read about all changes in detail in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/CHANGELOG"}),"Changelog"),"."))}d.isMDXComponent=!0}}]);