(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{64:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),s=(n(0),n(84)),i={id:"Intermix v0.6.0 Released",title:"Intermix v0.6.0 Released",author:"Roland Jansen",tags:["release","intermix","presets"]},o={permalink:"/intermix/blog/Intermix v0.6.0 Released",editUrl:"https://github.com/RolandJansen/intermix/tree/homepage/blog/blog/2020-08-05-Version-0.6-released.md",source:"@site/blog\\2020-08-05-Version-0.6-released.md",description:"Intermix Version 0.6.0 introduces preset management for plugins.",date:"2020-08-05T00:00:00.000Z",tags:[{label:"release",permalink:"/intermix/blog/tags/release"},{label:"intermix",permalink:"/intermix/blog/tags/intermix"},{label:"presets",permalink:"/intermix/blog/tags/presets"}],title:"Intermix v0.6.0 Released",readingTime:1.09,truncated:!1,nextItem:{title:"Intermix v0.5.0 Released",permalink:"/intermix/blog/Intermix v0.5.0 Released"}},l=[],c={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Intermix Version 0.6.0 introduces preset management for plugins."),Object(s.b)("p",null,"Plugins can save and restore properties defined in their\naction definitions. These property collections are called presets.\nA preset can be stored directly by name\nor in a so called slot. Technically there is no need for slots\nbut it could be convenient to handle presets in a similar way like in classic digital audio gear."),Object(s.b)("p",null,"Saving and loading presets is as simple as calling an\naction creator (in the examples we use a fictional plugin called ",Object(s.b)("em",{parentName:"p"},"synth"),"):"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'synth.actionCreators.savePreset("myPreset");\nsynth.actionCreators.loadPreset("myPreset");\n')),Object(s.b)("p",null,"Slots don't save or load presets directly. They just store a preset name\nthat was saved before:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'synth.actionCreators.presetSlotNumber(1);        // arm slot number 1\nsynth.actionCreators.presetSlotName("myPreset"); // write plugin-name to slot\n\nsynth.actionCreators.savePreset("myOtherPreset");\nsynth.actionCreators.presetSlotNumber(5);\nsynth.actionCreators.presetSlotName("myOtherPreset");\n')),Object(s.b)("p",null,'Now we have preset-references in slot 1 and 5.\nTo "load" one of these presets we have to retrieve its name\nand then load the preset like in the first example:'),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const state = intermix.getState()[synth.uid]; // get current state of the plugin\nconst presetName = state.presetSlots[5];      // get the name stored in slot 5\nsynth.actionCreators.loadPreset(presetName);  // finally load the preset\n")),Object(s.b)("p",null,"Another noticable change in 0.6.0 is that ID placeholders were renamed from ",Object(s.b)("inlineCode",{parentName:"p"},"{UID}")," to ",Object(s.b)("inlineCode",{parentName:"p"},"<UID>"),"\nsince curly braces have a meaning in OSC semantics. Other small changes are listed in the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/CHANGELOG"}),"Changelog"),"."))}p.isMDXComponent=!0}}]);